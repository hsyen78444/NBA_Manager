

import java.util.ArrayList;
import java.util.Scanner;

public class Searching {
	ArrayList<Player> plist = Player.fullPlayerList();

	public ArrayList<Player> dynamicSearching() {
		ArrayList<Player> result = new ArrayList<>();
		/*
		 * double height = 0; double weight = 0; String height_condition = ""; String
		 * weight_condition = ""; String position = "";
		 */
		System.out.println("Dynamic Searching");
		Scanner sc = new Scanner(System.in);
		System.out.println("Based on which Height Filter rule(type a number): 1 for >=, 2 for <=");
		int heightfil = sc.nextInt();
		System.out.println("Needed Height(m): ");
		double height = sc.nextDouble();
		System.out.println("Based on which Weight Filter rule(type a number): 1 for >=, 2 for <=");
		int weightfil = sc.nextInt();
		System.out.println("Needed Weight(kg): ");
		double weight = sc.nextDouble();
		System.out.println("Needed Position(G/F/C): ");
		String position = sc.next();
		sc.close();
		int i = 1;
		while (i < plist.size()) {
			Player fil = plist.get(i);
			if (heightfil == 1 && weightfil == 1) {
				if (fil.getHeight() >= height && fil.getWeight() >= weight && fil.getPosition().equals(position)) {
					result.add(fil);
				}
			} else if (heightfil == 1 && weightfil == 2) {
				if (fil.getHeight() >= height && fil.getWeight() <= weight && fil.getPosition().equals(position)) {
					result.add(fil);
				}
			} else if (heightfil == 2 && weightfil == 1) {
				if (fil.getHeight() <= height && fil.getWeight() >= weight && fil.getPosition().equals(position)) {
					result.add(fil);
				}
			} else if (heightfil == 2 && weightfil == 2) {
				if (fil.getHeight() <= height && fil.getWeight() <= weight && fil.getPosition().equals(position)) {
					result.add(fil);
				}
			} else {
				System.out.println("Invalid type!");
				return result;
			}
			i++;
		}
		printSpecificRoster(result);
		System.out.println("\nResult number: " + result.size());
		return result;
	}
	/*
	 * System.out.
	 * println("Format : Height,>= or <=,HEIGHT_VALUE,Weight,>= or <=,WEIGHT_VALUE,Position,-,PLAYER_POSITION"
	 * ); Scanner sc = new Scanner(System.in);
	 * System.out.print("Find attribute : "); String[] arr = new String[9]; arr =
	 * sc.nextLine().split(","); sc.close(); for(int i = 0; i < arr.length; i++) {
	 * if(arr[i].equalsIgnoreCase("Height")) { height = Double.parseDouble(arr[i +
	 * 2]); height_condition = arr[i + 1]; }
	 *
	 * if(arr[i].equalsIgnoreCase("Weight")) { weight = Double.parseDouble(arr[i +
	 * 2]); weight_condition = arr[i + 1]; }
	 *
	 * if(arr[i].equalsIgnoreCase("Position")) { position = arr[i + 2]; } }
	 *
	 * for (Player player : roster) { if(heightFilter(height_condition, height,
	 * player) && weightFilter(weight_condition, weight, player) &&
	 * postionFilter(position, player)) { result.add(player);
	 *
	 * } } printSpecificRoster(result); return result; }
	 */

	/*
	 * public boolean heightFilter(String condition, double height, Player player) {
	 * if(condition.equals("<=")) { if(player.getHeight() <= height) { return true;
	 * } } else if(condition.equals(">=")) { if(player.getHeight() >= height) {
	 * return true; } } return false; }
	 *
	 * public boolean weightFilter(String condition, double weight, Player player) {
	 * if(condition.equals("<=")) { if(player.getWeight() <= weight) { return true;
	 * } } else if(condition.equals(">=")) { if(player.getWeight() >= weight) {
	 * return true; } } return false; }
	 *
	 * public boolean postionFilter(String position, Player player) { return
	 * (player.getPosition().equals(position)); }
	 */


	static public void printSpecificRoster(ArrayList<Player> specific) {
		System.out.println("Player List :");
		System.out.println();
		System.out.println(
				"Name                     | Age | Height | Weight | Position | Salary | Points | Rebounds | Assists | Steals | Blocks");
		System.out.println(
				"---------------------------------------------------------------------------------------------------------------------");
		for (Player player : specific) {
			String playerName = String.format("%-25s", player.getName());
			String playerAge = String.format("%4s", player.getAge());
			String playerHeight = String.format("%6s", player.getHeight());
			String playerWeight = String.format("%6s", player.getWeight());
			String playerPosition = String.format("%8s", player.getPosition());
			String playerSalary = String.format("%5s", player.getSalary());
			String playerPPG = String.format("%6s", player.getPointsPerGame());
			String playerRPG = String.format("%8s", player.getReboundsPerGame());
			String playerAPG = String.format("%7s", player.getAssistsPerGame());
			String playerSPG = String.format("%6s", player.getStealsPerGame());
			String playerBPG = String.format("%6s", player.getBlocksPerGame());

			String playerInfo = playerName + "|" + playerAge + " | " + playerHeight + " | " + playerWeight + " | "
					+ playerPosition + " | " + playerSalary + " | " + playerPPG + " | " + playerRPG + " | " + playerAPG
					+ " | " + playerSPG + " | " + playerBPG;

			System.out.println(playerInfo);
		}
	}
}
