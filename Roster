

import java.util.ArrayList;

public class Roster {
    private String teamName;
    private ArrayList<Player> roster;
    private int forwardPlayer;
    private int guardPlayer;
    private int centrePlayer;
    private int minPlayers = 10;
    private int maxPlayers = 15;
    private int minGuards = 2;
    private int minForwards = 2;
    private int minCenters = 2;
    private double totalSalaryCap = 20000;
    private double remainingSalaryCap = totalSalaryCap;
    // private double minSuperstarSalary = 3000;
    // private double minNonSuperstarSalary = 1000;


    public Roster(String teamName) {
        this.teamName = teamName;
        this.roster = new ArrayList<>();
    }
    public static void main(String[] args) {
    	Player pl = new Player(1);
    	Player pl1 = new Player(2);
    	Player pl2 = new Player(527);
    	Player pl3 = new Player(528);
    	Player pl4 = new Player(529);
    	Player pl5 = new Player(536);


		Roster roster1 = new Roster("HST");
		roster1.addPlayer(pl);
		roster1.addPlayer(pl1);
		roster1.addPlayer(pl2);
		roster1.addPlayer(pl3);
		roster1.addPlayer(pl4);
		roster1.addPlayer(pl5);
		roster1.printRoster();
	}

    public void addPlayer(Player player) {
        if (roster.size() < maxPlayers && remainingSalaryCap >= player.getSalary()) {
            roster.add(player);
            if(player.getPosition().equalsIgnoreCase("F")) {
                forwardPlayer++;
            }
            else if(player.getPosition().equalsIgnoreCase("G")) {
                guardPlayer++;
            }
            else if(player.getPosition().equalsIgnoreCase("C")) {
                centrePlayer++;
            }
            remainingSalaryCap -= player.getSalary();
            System.out.println(player.getName() + " added to " + teamName + ".");
        }
        else {
            System.out.println("Cannot add " + player.getName() + ". Roster is full or salary cap exceeded.");
        }
    }

    public void removePlayer(Player player) {
        if(roster.size() > minPlayers) {
            roster.remove(player);
            if(player.getPosition().equalsIgnoreCase("F")) {
                forwardPlayer--;
            }
            else if(player.getPosition().equalsIgnoreCase("G")) {
                guardPlayer--;
            }
            else if(player.getPosition().equalsIgnoreCase("C")) {
                centrePlayer--;
            }
            remainingSalaryCap += player.getSalary();
            System.out.println(player.getName() + " removed from " + teamName + ".");
        }
        else {
            System.out.println("Cannot remove " + player.getName() + ". Number of players is less than 10.");
        }
    }

    public boolean checkRoster() {
        return (forwardPlayer >= minForwards && centrePlayer >= minCenters && guardPlayer >= minGuards && remainingSalaryCap>= 0);
    }

    public void printRoster() {
        System.out.println("Player List :");
        System.out.println();
        System.out.println("Name           | Age | Height | Weight | Position | Salary | Points | Rebounds | Assists | Steals | Blocks");
        System.out.println("----------------------------------------------------------------------------------------------------------");
        for (Player player : roster) {
            String playerName = String.format("%-15s", player.getName());
            String playerAge = String.format("%4s", player.getAge());
            String playerHeight = String.format("%6s", player.getHeight());
            String playerWeight = String.format("%6s", player.getWeight());
            String playerPosition = String.format("%8s", player.getPosition());
            String playerSalary = String.format("%5s", player.getSalary());
            String playerPPG = String.format("%6s",player.getPointsPerGame());
            String playerRPG = String.format("%8s",player.getReboundsPerGame());
            String playerAPG = String.format("%7s",player.getAssistsPerGame());
            String playerSPG = String.format("%6s",player.getStealsPerGame());
            String playerBPG = String.format("%6s",player.getBlocksPerGame());

            String playerInfo = playerName + "|" + playerAge + " | " + playerHeight + " | " + playerWeight + " | " + playerPosition + " | "
                              + playerSalary + " | " + playerPPG + " | " + playerRPG + " | "  + playerAPG + " | " + playerSPG + " | " + playerBPG;

            System.out.println(playerInfo);
        }
    }


    public void printRoster(ArrayList<Player> result) {
        System.out.println("Player List :");
        System.out.println();
        System.out.println("Name           | Age | Height | Weight | Position | Salary | Points | Rebounds | Assists | Steals | Blocks");
        System.out.println("----------------------------------------------------------------------------------------------------------");
        for (Player player : roster) {
            String playerName = String.format("%-15s", player.getName());
            String playerAge = String.format("%4s", player.getAge());
            String playerHeight = String.format("%6s", player.getHeight());
            String playerWeight = String.format("%6s", player.getWeight());
            String playerPosition = String.format("%8s", player.getPosition());
            String playerSalary = String.format("%5s", player.getSalary());
            String playerPPG = String.format("%6s",player.getPointsPerGame());
            String playerRPG = String.format("%8s",player.getReboundsPerGame());
            String playerAPG = String.format("%7s",player.getAssistsPerGame());
            String playerSPG = String.format("%6s",player.getStealsPerGame());
            String playerBPG = String.format("%6s",player.getBlocksPerGame());

            String playerInfo = playerName + "|" + playerAge + " | " + playerHeight + " | " + playerWeight + " | " + playerPosition + " | "
                              + playerSalary + " | " + playerPPG + " | " + playerRPG + " | "  + playerAPG + " | " + playerSPG + " | " + playerBPG;

            System.out.println(playerInfo);
        }
    }

    public String getTeamName() {
        return teamName;
    }

    public ArrayList<Player> getRoster() {
        return roster;
    }

    public int getForwardPlayer() {
        return forwardPlayer;
    }

    public int getGuardPlayer() {
        return guardPlayer;
    }

    public int getCentrePlayer() {
        return centrePlayer;
    }

    public int getMinPlayers() {
        return minPlayers;
    }

    public int getMaxPlayers() {
        return maxPlayers;
    }

    public int getMinGuards() {
        return minGuards;
    }

    public int getMinForwards() {
        return minForwards;
    }

    public int getMinCenters() {
        return minCenters;
    }

    public double getTotalSalaryCap() {
        return totalSalaryCap;
    }

    public double getRemainingSalaryCap() {
        return remainingSalaryCap;
    }
}
