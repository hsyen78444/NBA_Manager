import java.util.ArrayList;
import java.util.Collections;
import java.util.Deque;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;

public class DFS<T extends Comparable<T>,N extends Comparable <N>> {
    WeightedGraph<T,N> graph=new WeightedGraph<>();
    public DFS(WeightedGraph<T,N> wg){
        graph=wg;
    }
    //this is DFS algorithm
    public ArrayList<T> dfs(T startVertex){
        Vertex<T,N>temp=graph.head;
        while(temp!=null){
            temp.setVisited(false);
            temp=temp.nextVertex;
        }
       ArrayList<T>sl=new ArrayList<>(graph.size);
       Deque<T>stack=new LinkedList<>();
       stack.push(startVertex);
       while(!stack.isEmpty()){
            T current=stack.pop();
            if(!graph.getVertex(current).isVisited()){
                graph.getVertex(current).setVisited(true);
                sl.add(current);
                Queue<ComparableDistance<T,N>>pq=new PriorityQueue<>(Collections.reverseOrder());
                for(T nei:graph.getNeighbours(current))
                pq.add(new ComparableDistance(graph.getEdgeWeight(current,nei),nei)); 
                while (pq.peek()!= null) { 
                    T hold=pq.remove().name;
                    stack.push(hold);
                }
            }
       }
       return sl;
   }
   //from the algorithm, calculate the total distance travel
   public int calcDFSTotal(ArrayList<T>sl){
       int total=0;
       for(int i=0,j=1;j<sl.size();i++,j++){
           if(graph.hasEdge(sl.get(i),sl.get(j))){
               total=total+Integer.parseInt(graph.getEdgeWeight(sl.get(i),sl.get(j)).toString());
           }else{
               int k=i-1,l=j-1; 
               while(!graph.hasEdge(sl.get(k),sl.get(j))){
                   total=total+Integer.parseInt(graph.getEdgeWeight(sl.get(k),sl.get(l)).toString());
                   k--;l--;          
               }
               total=total+Integer.parseInt(graph.getEdgeWeight(sl.get(k),sl.get(l)).toString());
               total=total+Integer.parseInt(graph.getEdgeWeight(sl.get(k),sl.get(j)).toString()); 
               
           }
       }
       System.out.println("\nDFS is a better selection in this situation, \n"
                + "as although BFS go through all the vertices,\n"
                + "it functions to find the unweighted shortest path between two vertices only.");
       return total;
   }
}
